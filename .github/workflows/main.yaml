name: CI/CD Pipeline

on:
  push:
    branches:
      - main  
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    name: Provision EC2 with Terraform
    outputs:
      output1: ${{ steps.ip_address.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          
          aws-region: "eu-west-1"

      - name: Terraform Init
        run: terraform init

      - name: terraform destroy
        run: terraform destroy --auto-approve  

      - name: Terraform Apply
        run: terraform apply --auto-approve
      
      - id: ip_address
        
        run: | 
            terraform-bin output instance_ip |tr "\"" "\0" >ip
            echo ip=$(cat ip) >> "$GITHUB_OUTPUT" 
           
       
       

      
        
  test-and-package:
    runs-on: ubuntu-latest
    needs: terraform_deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install SSH client
        run: sudo apt-get install -y openssh-client    

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover -s my_package/tests -p 'test_*.py'
          
      - name: Lint with pylint
        run: |
          pip install pylint
          pylint my_package/main.py

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
          mkdir artifacts
          mv dist/* artifacts/

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: my_flask_app_package
          path: artifacts/

      - name: deploy copy to ec2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ needs.terraform_deploy.outputs.output1 }}
          username: ec2-user
          key: ${{  secrets.SSH_PRIVATE_KEY}}
          port: 22
          source: .
          target: app
      - name: depoly ec2 
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{needs.terraform_deploy.outputs.output1}}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd app
            python setup.py install
          
        
              
